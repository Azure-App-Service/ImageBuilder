parameters:
  ascName: WAWS_Container_Images
  acrName: wawsimages.azurecr.io
  baseImageName: "mcr.microsoft.com/oryx"
  baseImageVersion: "20220718.2"
  appSvcGitUrl: "https://github.com/Azure-App-Service"
  kuduliteInternalRepo: $(KUDU_REPO)
  DiagnosticServerInternalRepo: $(DiagnosticServer_REPO)
  kuduliteBranch: $(KUDULITE_BRANCH)
  stack: ""
  stackVersion: $(STACK_VERSION)

steps:
- script: |
    if [ "$(InitialChecks)" != "true" ]
    then
      echo "Invalid configuration."
      echo "Variable 'InitialChecks' needs to be 'true' to run this build."
      exit 1
    fi
  displayName: 'Validate pipeline run'

- task: ComponentGovernanceComponentDetection@0

- task: Docker@1
  displayName: Container registry login
  inputs:
    command: login
    azureSubscriptionEndpoint: ${{ parameters.ascName }}
    azureContainerRegistry: ${{ parameters.acrName }}

- task: ShellScript@2
  displayName: 'Generate Go Docker Files'
  condition: or(eq( '${{ parameters.stack }}' , ''), eq( '${{ parameters.stack }}' ,'go'))
  inputs:
    scriptPath: ./GenerateDockerFiles/go/generateDockerfiles.sh
    args: $(Build.ArtifactStagingDirectory) ${{ parameters.baseImageName }} ${{ parameters.baseImageVersion }} ${{ parameters.appSvcGitUrl }} $(System.DefaultWorkingDirectory)/Config

- task: ShellScript@2
  displayName: 'Generate Node Docker Files'
  condition: or(eq('${{ parameters.stack }}' , ''), eq('${{ parameters.stack }}','node'))
  inputs:
    scriptPath: ./GenerateDockerFiles/node/generateDockerfiles.sh
    args: $(Build.ArtifactStagingDirectory) ${{ parameters.baseImageName }} ${{ parameters.baseImageVersion }} ${{ parameters.appSvcGitUrl }} $(System.DefaultWorkingDirectory)/Config

- task: ShellScript@2
  displayName: 'Generate ASP .NET Core Docker Files'
  condition: or(eq('${{ parameters.stack }}', ''), eq('${{ parameters.stack }}' ,'dotnetcore'))
  inputs:
    scriptPath: ./GenerateDockerFiles/dotnetcore/generateDockerfiles.sh
    args: $(Build.ArtifactStagingDirectory) ${{ parameters.baseImageName }} ${{ parameters.baseImageVersion }} ${{ parameters.appSvcGitUrl }} $(System.DefaultWorkingDirectory)/Config ${{ parameters.stackVersion }}

- task: ShellScript@2
  displayName: 'Generate Python Docker Files'
  condition: or(eq('${{ parameters.stack }}' , ''), eq( '${{ parameters.stack }}','python'))
  inputs:
    scriptPath: ./GenerateDockerFiles/python/generateDockerfiles.sh
    args: $(Build.ArtifactStagingDirectory) ${{ parameters.baseImageName }} ${{ parameters.baseImageVersion }} ${{ parameters.appSvcGitUrl }} $(System.DefaultWorkingDirectory)/Config

- task: ShellScript@2
  displayName: 'Generate PHP Docker Files'
  condition: or(eq('${{ parameters.stack }}', ''), eq('${{ parameters.stack }}','php'))
  inputs:
    scriptPath: ./GenerateDockerFiles/php/generateDockerfiles.sh
    args: $(Build.ArtifactStagingDirectory) ${{ parameters.baseImageName }} ${{ parameters.baseImageVersion }} ${{ parameters.appSvcGitUrl }} $(System.DefaultWorkingDirectory)/Config

- task: ShellScript@2
  displayName: 'Generate PHP Xdebug Docker Files'
  condition: or(eq('${{ parameters.stack }}', ''), eq('${{ parameters.stack }}','php-xdebug'))
  inputs:
    scriptPath: ./GenerateDockerFiles/php-xdebug/generateDockerfiles.sh
    args: $(Build.ArtifactStagingDirectory) mcr.microsoft.com/appsvc $(Build.BuildNumber) ${{ parameters.appSvcGitUrl }} $(System.DefaultWorkingDirectory)/Config

- task: ShellScript@2
  displayName: 'Generate Ruby Docker Files'
  condition: or(eq('${{ parameters.stack }}', ''), eq('${{ parameters.stack }}','ruby'))
  inputs:
    scriptPath: ./GenerateDockerFiles/ruby/generateDockerfiles.sh
    args: $(Build.ArtifactStagingDirectory) ${{ parameters.appSvcGitUrl }} $(System.DefaultWorkingDirectory)/Config

- task: ShellScript@2
  displayName: 'Generate Wordpress Docker Files'
  condition: or(eq('${{ parameters.stack }}', ''), eq('${{ parameters.stack }}','wordpress'))
  inputs:
    scriptPath: ./GenerateDockerFiles/wordpress/generateDockerfiles.sh
    args: $(Build.ArtifactStagingDirectory) $(System.DefaultWorkingDirectory)/Config

- task: ShellScript@2
  displayName: 'Generate KuduLite Docker Files'
  condition: or(eq('${{ parameters.stack }}', ''), eq('${{ parameters.stack }}','kudulite'))
  inputs:
    scriptPath: ./GenerateDockerFiles/KuduLite/generateDockerfiles.sh
    args: $(Build.ArtifactStagingDirectory) ${{ parameters.baseImageName }} ${{ parameters.baseImageVersion }} ${{ parameters.kuduliteInternalRepo }} $(System.DefaultWorkingDirectory)/Config ${{ parameters.kuduliteBranch }}

- task: ShellScript@2
  displayName: 'Generate Static Site Docker Files'
  condition: or(eq('${{ parameters.stack }}', ''), eq('${{ parameters.stack }}','static-site'))
  inputs:
    scriptPath: ./GenerateDockerFiles/staticsite/generateDockerfiles.sh
    args: $(Build.ArtifactStagingDirectory) ${{ parameters.baseImageName }} ${{ parameters.baseImageVersion }} ${{ parameters.appSvcGitUrl }} $(System.DefaultWorkingDirectory)/Config

- task: ShellScript@2
  condition: or(eq('${{ parameters.stack }}', ''), eq('${{ parameters.stack }}','diagnostic-server'))
  displayName: 'Generate DiagnosticServer Docker Files'
  inputs:
    scriptPath: ./GenerateDockerFiles/DiagnosticServer/generateDockerfiles.sh
    args: $(Build.ArtifactStagingDirectory) ${{ parameters.DiagnosticServerInternalRepo }} $(System.DefaultWorkingDirectory)/Config


    # Publish Build Artifacts
# Publish build artifacts to Azure Pipelines/TFS or a file share
- task: PublishBuildArtifacts@1
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)'
    #artifactName: 'drop'
    #publishLocation: 'Container' # Options: container, filePath
    #targetPath: # Required when publishLocation == FilePath
    #parallel: false # Optional
    #parallelCount: # Optional
