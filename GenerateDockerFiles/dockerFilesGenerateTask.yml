parameters:
  ascName: AppSvcDevACR
  acrName: appsvcdevacr.azurecr.io
  baseImageName: "mcr.microsoft.com/oryx"
  baseImageVersion: "20191018.1"
  appSvcGitUrl: "https://github.com/Azure-App-Service"

steps:
- script: |
    if [ "$(InitialChecks)" != "true" ]
    then
      echo "Invalid configuration."
      echo "Variable 'InitialChecks' needs to be 'true' to run this build."
      exit 1
    fi
  displayName: 'Validate pipeline run'

- task: Docker@1
  displayName: Container registry login
  inputs:
    command: login
    azureSubscriptionEndpoint: ${{ parameters.ascName }}
    azureContainerRegistry: ${{ parameters.acrName }}

- task: ShellScript@2
  displayName: 'Generate Node Docker Files'
  inputs:
    scriptPath: ./GenerateDockerFiles/node/generateDockerfiles.sh
    args: $(Build.ArtifactStagingDirectory) ${{ parameters.baseImageName }} ${{ parameters.baseImageVersion }} ${{ parameters.appSvcGitUrl }} $(System.DefaultWorkingDirectory)/Config

- task: ShellScript@2
  displayName: 'Generate ASP .NET Core Docker Files'
  inputs:
    scriptPath: ./GenerateDockerFiles/dotnetcore/generateDockerfiles.sh
    args: $(Build.ArtifactStagingDirectory) ${{ parameters.baseImageName }} ${{ parameters.baseImageVersion }} ${{ parameters.appSvcGitUrl }} $(System.DefaultWorkingDirectory)/Config

- task: ShellScript@2
  displayName: 'Generate Python Docker Files'
  inputs:
    scriptPath: ./GenerateDockerFiles/python/generateDockerfiles.sh
    args: $(Build.ArtifactStagingDirectory) ${{ parameters.baseImageName }} ${{ parameters.baseImageVersion }} ${{ parameters.appSvcGitUrl }} $(System.DefaultWorkingDirectory)/Config

- task: ShellScript@2
  displayName: 'Generate KuduLite Docker Files'
  inputs:
    scriptPath: ./GenerateDockerFiles/KuduLite/generateDockerfiles.sh
    args: $(Build.ArtifactStagingDirectory) ${{ parameters.baseImageName }} ${{ parameters.baseImageVersion }} ${{ parameters.appSvcGitUrl }} $(System.DefaultWorkingDirectory)/Config

# Publish Build Artifacts
# Publish build artifacts to Azure Pipelines/TFS or a file share
- task: PublishBuildArtifacts@1
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)' 
    #artifactName: 'drop' 
    #publishLocation: 'Container' # Options: container, filePath
    #targetPath: # Required when publishLocation == FilePath
    #parallel: false # Optional
    #parallelCount: # Optional